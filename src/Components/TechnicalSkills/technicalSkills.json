{
  "skillAreas":[
    {
      "title":"Technical Skills - Languages and Tools:",
      "entries":[
        {
          "title":"Python (Intermediate)",
          "text":"During my time at Sanger, Python was the primary programming language I worked in. I became familiar with libraries such as FastAPI, Pydantic, Pytest, and PyMongo. See the work experience section for more details on the work I completed in Python during my placement year. I’ve also become familiar with Python through my university degree. In the DATA module I used libraries like NumPy, Pandas and Seaborn to analyse bank transfer data and visualise the results (using techniques such as KMeans clustering, decision trees, and linear regression models). In IMLO I created a neural network with PyTorch to classify the Flowers 102 dataset to a ~70% degree of accuracy."
        },
        {
          "title":"Web Dev (Beginner)",
          "text":"I am familiar with web development techniques. I completed “The Complete Web Development Boot Camp” which introduced technologies such as HTML, CSS, Bootstrap, Node.Js, React.Js, and MongoDB. I’ve continued these skills into a basic understanding of React.js which I used to build this website. See the work experience section for more information about how I worked with legacy React code during my time at the Sanger Institute."
        },
        {
          "title":"Java (Beginner)",
          "text":"Java was a primary language I used in university. For example, in ‘Engineering 1: Software & Systems Engineering’ I created a small videogame with a team in Java using an ECS (Event-Component-System) architecture."
        }
      ]
    },
    {
      "title":"Technical Skills - Development Practices:",
      "entries":[
        {
          "title":"Test Driven Design",
          "text":"After studying Test Driven Development by Example (Kent Beck) and Clean Code (Robert C. Martin), I made TDD my standard workflow. I shared my learning through talks at the Wellcome Sanger Institute and the Fullstack BioDev network, where I explained concepts like mocking and iterative testing."
        },
        {
          "title":"Clean Code",
          "text":"Inspired by Clean Code and Clean Architecture by Robert C. Martin, I’ve adopted principles like meaningful naming, separation of concerns, and SOLID design. I applied these when refactoring legacy systems—for example, decoupling CLI logic using dependency inversion and replacing a singleton with explicit configuration passing to improve testability."
        }
      ]
    }
  ]
}